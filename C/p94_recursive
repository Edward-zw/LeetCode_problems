****************Binary Tree Inorder Traversal******************
Given a binary tree, return the inorder traversal of its nodes' values.

Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?
*************************************************************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int TreeHeight(struct TreeNode* root)
{
    int a, b;
    if(root == NULL)
        return 0;
    a = TreeHeight(root->left);
    b = TreeHeight(root->right);
    return a + b + 1;
}
void VisitTreeNode(struct TreeNode* root, int* a, int* returnSize)
{
    if(root == NULL)
        return ;
    VisitTreeNode(root->left,a, returnSize);
    a[(*returnSize)++] = root->val;
    VisitTreeNode(root->right,a, returnSize);
}
int* inorderTraversal(struct TreeNode* root, int* returnSize) {
    int length = TreeHeight(root);
    int* a;
    a = (int *)malloc(sizeof(int) * length);
    *returnSize = 0;
    VisitTreeNode(root, a, returnSize);
    return a;
    
}
